#!/bin/bash
set -euo pipefail

# ODIN Navigator Repository Cleanup Script
# Safely removes unused development files after analysis
# Generated: September 16, 2025

echo "üßπ ODIN Navigator Repository Cleanup"
echo "====================================="

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Safety check - ensure we're in the right repository
if [[ ! -f "package.json" ]] || ! grep -q "rest-express" package.json; then
    echo -e "${RED}‚ùå Error: Not in ODIN Navigator repository root${NC}"
    exit 1
fi

# Check if git repo is clean
if [[ -n $(git status --porcelain) ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Working directory has uncommitted changes${NC}"
    echo "Please commit or stash changes before running cleanup."
    exit 1
fi

# Get current disk usage
echo -e "${BLUE}üìä Calculating current disk usage...${NC}"
BEFORE_SIZE=$(du -sh . | cut -f1)
echo "Repository size before cleanup: $BEFORE_SIZE"

# Create candidate list
CANDIDATES_FILE="cleanup_candidates.txt"
cat > "$CANDIDATES_FILE" << 'EOF'
# ODIN Navigator Cleanup Candidates
# Generated by automated analysis

## Superseded Development Files
client/src/App.old.tsx          # Unused - superseded by App.tsx
client/src/App.new.tsx          # Unused - superseded by App.tsx
vite.config.js                  # Duplicate - TypeScript version is canonical
cleanup-script.sh               # Self-removing - this script becomes obsolete

## Platform-Specific Files (Optional)
.replit                         # Replit-specific configuration
.local/                         # Local development state directory
EOF

echo -e "${GREEN}‚úÖ Cleanup candidate list created: $CANDIDATES_FILE${NC}"

# Dry run mode by default
if [[ "${RUN:-0}" != "1" ]]; then
    echo -e "${YELLOW}üîç DRY RUN MODE${NC}"
    echo "The following files would be removed:"
    echo ""
    
    # List files that exist and would be removed
    FILES_TO_REMOVE=(
        "client/src/App.old.tsx"
        "client/src/App.new.tsx" 
        "vite.config.js"
    )
    
    OPTIONAL_FILES=(
        ".replit"
        ".local/"
    )
    
    echo -e "${RED}Core cleanup targets:${NC}"
    for file in "${FILES_TO_REMOVE[@]}"; do
        if [[ -e "$file" ]]; then
            SIZE=$(du -sh "$file" 2>/dev/null | cut -f1 || echo "0B")
            echo "  - $file ($SIZE)"
        else
            echo "  - $file (not found)"
        fi
    done
    
    echo ""
    echo -e "${YELLOW}Optional platform files:${NC}"
    for file in "${OPTIONAL_FILES[@]}"; do
        if [[ -e "$file" ]]; then
            SIZE=$(du -sh "$file" 2>/dev/null | cut -f1 || echo "0B")
            echo "  - $file ($SIZE)"
        else
            echo "  - $file (not found)"
        fi
    done
    
    echo ""
    echo -e "${BLUE}To execute cleanup:${NC}"
    echo "  RUN=1 bash cleanup-script.sh"
    echo ""
    echo -e "${BLUE}To cleanup untracked files interactively:${NC}"
    echo "  git clean -i -fd"
    
    exit 0
fi

# Execution mode
echo -e "${GREEN}üöÄ EXECUTION MODE${NC}"
echo "Creating backup branch..."

# Create backup branch
BACKUP_BRANCH="chore/cleanup-preview-$(date +%Y%m%d-%H%M%S)"
git switch -c "$BACKUP_BRANCH"
echo "Created backup branch: $BACKUP_BRANCH"

# Verify build works before cleanup
echo -e "${BLUE}üîç Verifying build before cleanup...${NC}"
if ! npm run build > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Build failed before cleanup. Aborting.${NC}"
    git switch main
    git branch -D "$BACKUP_BRANCH"
    exit 1
fi
echo -e "${GREEN}‚úÖ Pre-cleanup build successful${NC}"

# Execute removals
echo -e "${BLUE}üóëÔ∏è  Removing superseded files...${NC}"

# Remove superseded development files
if [[ -f "client/src/App.old.tsx" ]]; then
    git rm "client/src/App.old.tsx"
    echo "  ‚úì Removed App.old.tsx"
fi

if [[ -f "client/src/App.new.tsx" ]]; then
    git rm "client/src/App.new.tsx"
    echo "  ‚úì Removed App.new.tsx"
fi

if [[ -f "vite.config.js" ]]; then
    git rm "vite.config.js"
    echo "  ‚úì Removed vite.config.js"
fi

# Optional: Remove platform files if they exist
if [[ -f ".replit" ]]; then
    echo -e "${YELLOW}Found .replit file. Remove? (y/N)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        git rm ".replit"
        echo "  ‚úì Removed .replit"
    fi
fi

if [[ -d ".local" ]]; then
    echo -e "${YELLOW}Found .local/ directory. Remove? (y/N)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        git rm -r ".local/"
        echo "  ‚úì Removed .local/"
    fi
fi

# Commit changes if any files were removed
if [[ -n $(git status --porcelain) ]]; then
    git commit -m "chore: remove superseded development files

- Remove App.old.tsx and App.new.tsx (superseded by App.tsx)
- Remove compiled vite.config.js (TypeScript version is canonical)
- Remove platform-specific development files

Generated by automated cleanup script"
    
    echo -e "${GREEN}‚úÖ Changes committed${NC}"
else
    echo -e "${YELLOW}‚ÑπÔ∏è  No files were removed${NC}"
fi

# Verify build still works
echo -e "${BLUE}üîç Verifying build after cleanup...${NC}"
if ! npm run build > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Build failed after cleanup. Restoring...${NC}"
    git reset --hard HEAD~1
    echo -e "${YELLOW}‚ö†Ô∏è  Cleanup reverted due to build failure${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Post-cleanup build successful${NC}"

# Test development server startup
echo -e "${BLUE}üîç Testing development server startup...${NC}"
if timeout 10s npm run dev > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Development server starts successfully${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Could not verify dev server (may require manual testing)${NC}"
fi

# Calculate space savings
AFTER_SIZE=$(du -sh . | cut -f1)
echo ""
echo -e "${GREEN}üìä Cleanup Summary${NC}"
echo "Repository size before: $BEFORE_SIZE"
echo "Repository size after:  $AFTER_SIZE"

# Interactive untracked file cleanup
echo ""
echo -e "${BLUE}üîç Checking for untracked files...${NC}"
if git clean -n -fd | grep -q .; then
    echo "Found untracked files:"
    git clean -n -fd
    echo ""
    echo -e "${YELLOW}Remove untracked files interactively? (y/N)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        git clean -i -fd
    fi
else
    echo -e "${GREEN}‚úÖ No untracked files found${NC}"
fi

# Final instructions
echo ""
echo -e "${GREEN}üéâ Cleanup completed successfully!${NC}"
echo ""
echo "Next steps:"
echo "1. Review changes: git log --oneline -5"
echo "2. Test application thoroughly"
echo "3. Merge to main: git switch main && git merge $BACKUP_BRANCH"
echo "4. Or discard: git switch main && git branch -D $BACKUP_BRANCH"
echo ""
echo "Cleanup candidates file: $CANDIDATES_FILE"

# Self-destruct option
echo ""
echo -e "${YELLOW}Remove this cleanup script? (y/N)${NC}"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    git rm cleanup-script.sh
    git commit -m "chore: remove cleanup script after execution"
    echo -e "${GREEN}‚úÖ Cleanup script removed${NC}"
fi